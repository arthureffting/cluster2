import argparse
import os
import sys

from scripts.original.iam_conversion.document_pair import ImageXmlPair
from scripts.original.iam_conversion.prepare_train_data import prepare
from scripts.original.iam_conversion.storage import store_xml
from scripts.utils.read_splits import Split

parser = argparse.ArgumentParser(description='Prepare data for training')
parser.add_argument('--dataset', default="orcas")
args = parser.parse_args()

# Get environmental data generated by the bash script
data_folder = os.getenv("DATA_FOLDER") if os.getenv("DATA_FOLDER") else "data"
originals_folder = os.getenv("ORIGINAL_FOLDER") if os.getenv("ORIGINAL_FOLDER") else "data/original"
splits_folder = os.getenv("SPLIT_FOLDER") if os.getenv("SPLIT_FOLDER") else "data/split"

# Should store everything under data/sfr/<dataset>
target_folder = os.path.join(data_folder, "sfr", args.dataset)
database_original_folder = os.path.join(originals_folder, args.dataset)
database_splits = os.path.join(splits_folder, args.dataset)

print("[Preparing images] Model: SFR | Dataset: ", args.dataset)

if args.dataset == "iam":
    splits = Split.read_iam_data(database_splits)

    for dataset in splits.sets:
        pairs = []
        training_indexes = set([line.page_index for line in splits.sets[dataset].items])
        for page_index in training_indexes:
            img_path = os.path.join(database_original_folder, "pages", page_index + ".png")
            xml_path = os.path.join(database_original_folder, "xml", page_index + ".xml")
            assert os.path.exists(img_path) and os.path.isfile(img_path)
            assert os.path.exists(xml_path) and os.path.isfile(xml_path)
            pair = ImageXmlPair(page_index, img_path, xml_path)
            pairs.append(pair)

        processed_xml_folder = os.path.join(target_folder, "transformed-xml")

        for i, doc_pair in enumerate(pairs):
            sys.stdout.write("\r" + "[Converting metadata] " + str(round(100 * (i + 1) / len(pairs), 2)) + "%")
            # Paths used for storing processed data
            processed_xml_path = os.path.join(processed_xml_folder, str(doc_pair.index) + ".xml")
            if doc_pair.is_converted(processed_xml_path):
                continue
            new_img, new_xml = doc_pair.convert()
            store_xml(new_xml, processed_xml_path)
            doc_pair.set_processed_xml_path(processed_xml_path)

        output_folder = os.path.join(target_folder, "pages")
        prepare(pairs, output_folder, splits.sets[dataset].name)

    print("[Images prepared successfully]")
else:
    splits = Split.read_orcas_data(database_splits)

    for dataset in splits.sets:
        pairs = []
        training_indexes = set([line.page_index for line in splits.sets[dataset].items])

        for page_index in training_indexes:
            img_path = os.path.join(database_original_folder, "pages", page_index + ".jpg")
            xml_path = os.path.join(database_original_folder, "xml", page_index + ".xml")
            pair = ImageXmlPair(page_index, img_path, xml_path)
            pairs.append(pair)

        output_folder = os.path.join(target_folder, "pages")
        prepare(pairs, output_folder, splits.sets[dataset].name)
    # TODO
    print("[Not implemented]")
